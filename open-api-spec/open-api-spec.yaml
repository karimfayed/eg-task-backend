openapi: 3.0.0
info:
  title: EG-Endpoints API
  description: API endpoints converted from Postman collection
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /:
    get:
      summary: Hello World
      description: Simple endpoint to check if API is running
      tags:
        - General
      operationId: helloWorld
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseHelloWorld'

  /auth/signup:
    post:
      summary: User Signup
      description: Register a new user
      tags:
        - Authentication
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseProfile'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseError'

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return tokens
      tags:
        - Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseAuth'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseError'

  /auth/refresh:
    post:
      summary: Refresh Token
      description: Get a new access token using a refresh token
      tags:
        - Authentication
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseAuth'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseError'

  /user/profile:
    get:
      summary: User Profile
      description: Get authenticated user's profile information
      tags:
        - User
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseError'

components:
  schemas:
    # Base response structures
    HttpResponse:
      type: object
      required:
        - statusCode
        - body
      properties:
        statusCode:
          type: number
          description: HTTP status code of the response
        body:
          $ref: '#/components/schemas/HttpResponseBody'
      description: Base response structure for all API endpoints

    HttpResponseBody:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Response message describing the result
        result:
          type: object
          nullable: true
          description: Optional result data (null for error responses)
      description: Base response body structure for all API endpoints

    # Specific response types
    HttpResponseHelloWorld:
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
        - type: object
          properties:
            statusCode:
              example: 200
            body:
              type: object
              properties:
                message:
                  example: "API is running correctly"
                result:
                  $ref: '#/components/schemas/HelloWorldResponse'
      description: Response for the hello world endpoint

    HttpResponseAuth:
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
        - type: object
          properties:
            statusCode:
              example: 200
            body:
              type: object
              properties:
                message:
                  example: "Authentication successful"
                result:
                  $ref: '#/components/schemas/AuthResponse'
      description: Response for authentication endpoints (login, refresh token)

    HttpResponseSignup:
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
        - type: object
          properties:
            statusCode:
              example: 201
            body:
              type: object
              properties:
                message:
                  example: "User registered successfully"
                result:
                  $ref: '#/components/schemas/AuthResponse'
      description: Response for user registration endpoint

    HttpResponseProfile:
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
        - type: object
          properties:
            statusCode:
              example: 200
            body:
              type: object
              properties:
                message:
                  example: "Profile retrieved successfully"
                result:
                  $ref: '#/components/schemas/ProfileResponse'
      description: Response for user profile endpoint

    HttpResponseError:
      allOf:
        - $ref: '#/components/schemas/HttpResponse'
        - type: object
          properties:
            statusCode:
              example: 400
            body:
              type: object
              properties:
                message:
                  example: "Request validation failed"
      description: Response for error scenarios (no result field)

    # Request schemas
    SignupDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          example: Karim
          description: User's name (minimum 3 characters)
        email:
          type: string
          format: email
          example: karim@gmail.com
          description: Valid email address
        password:
          type: string
          format: password
          minLength: 8
          pattern: ^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$
          example: karim@123
          description: Password (minimum 8 characters, at least 1 letter, 1 number, and 1 special character)
      description: Request payload for user registration
    
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: karim@gmail.com
          description: User's email address
        password:
          type: string
          format: password
          example: karim@123
          description: User's password
      description: Request payload for user authentication
    
    RefreshTokenDto:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: d84785d0-664b-457e-9fd3-a9ea24124009
          description: Refresh token to generate a new access token
      description: Request payload for refreshing the access token
    
    # Response data schemas
    AuthResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - user
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: JWT token for authentication
        refreshToken:
          type: string
          example: d84785d0-664b-457e-9fd3-a9ea24124009
          description: Token used to get a new access token when it expires
      description: Authentication response data including tokens
    
    User:
      type: object
      required:
        - _id
        - name
        - email
        - password
      properties:
        _id:
          type: string
          example: 680a8df0c64e148e185453b2
          description: MongoDB document ID
        name:
          type: string
          example: Karim
          description: User's full name
        email:
          type: string
          format: email
          example: karim@gmail.com
          description: User's email address (unique)
        password:
          type: string
          description: Hashed user password (bcrypt)
          example: $2b$10$X7EiYxHNCuD7QTJLIUlCB.qjwEWp3V7UvUZKpMW9D5dVZxqpJ03lS
      description: Complete user model including sensitive data (internal use only)
    
    
    ProfileResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: '#/components/schemas/User'
      description: User profile response data
    
    HelloWorldResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Hello, World!
          description: Simple greeting message
      description: Simple response to verify API is functioning
    
  # Security schemas
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication using the Authorization header with Bearer scheme
