openapi: 3.0.0
info:
  title: EG-Endpoints API
  description: API endpoints converted from Postman collection
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /:
    get:
      summary: Hello World
      description: Simple endpoint to check if API is running
      tags:
        - General
      operationId: helloWorld
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloWorldResponse'

  /auth/signup:
    post:
      summary: User Signup
      description: Register a new user
      tags:
        - Authentication
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return tokens
      tags:
        - Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh Token
      description: Get a new access token using a refresh token
      tags:
        - Authentication
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/profile:
    get:
      summary: User Profile
      description: Get authenticated user's profile information
      tags:
        - User
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SignupRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          example: Karim
          description: User's name (minimum 3 characters)
        email:
          type: string
          format: email
          example: karim@gmail.com
          description: Valid email address
        password:
          type: string
          format: password
          minLength: 8
          pattern: ^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$
          example: karim@123
          description: Password (minimum 8 characters, at least 1 letter, 1 number, and 1 special character)
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: karim@gmail.com
          description: User's email address
        password:
          type: string
          format: password
          example: karim@123
          description: User's password
    
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: d84785d0-664b-457e-9fd3-a9ea24124009
          description: Refresh token to generate a new access token
    
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: d84785d0-664b-457e-9fd3-a9ea24124009
        user:
          $ref: '#/components/schemas/User'
    
    User:
      type: object
      properties:
        id:
          type: string
          example: 680a8df0c64e148e185453b2
        name:
          type: string
          example: Karim
        email:
          type: string
          format: email
          example: karim@gmail.com
        createdAt:
          type: string
          format: date-time
    
    ProfileResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    
    HelloWorldResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, World!
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials
        message:
          type: string
          example: The provided email or password is incorrect
        statusCode:
          type: integer
          example: 401

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT